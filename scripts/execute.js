const hre = require("hardhat");

//removed factory nonce and the getCreateAddress we removed it as we are
//now utilising the senderCreator method in entrypoint to get the sender address

const FACTORY_ADDRESS = "0x9d04E4AF5f8b58EFC56eAd8DEAbd48A8cD692e78";
const EP_ADDRESS = "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789";
const PM_ADDRESS = "0x31B3E06D63df7f9F508790ecF9709862FBF736f7";

async function main() {
  const entryPoint = await hre.ethers.getContractAt("EntryPoint", EP_ADDRESS);

  const AccountFactory = await hre.ethers.getContractFactory("AccountFactory");
  const [signer0, signer1] = await hre.ethers.getSigners();
  const address0 = await signer0.getAddress();
  //we are now calculating initCode so we can pass this value to the senderCreator method which will calculate the sender address for us
  let initCode =
    FACTORY_ADDRESS +
    AccountFactory.interface
      .encodeFunctionData("createAccount", [address0])
      .slice(2);
  let sender;
  //weird huh? - this is because the sender address we want even before its deployed, so
  //the address is received when the transaction is reverted i.e in the entrypoint contract here is the method :
  /*  * Get counterfactual sender address.
   *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.
   * this method always revert, and returns the address in SenderAddressResult error
   * @param initCode the constructor code to be passed into the UserOperation.
   */
  /* function getSenderAddress(bytes calldata initCode) public {
      address sender = senderCreator.createSender(initCode);
      revert SenderAddressResult(sender);
  } */
  try {
    await entryPoint.getSenderAddress(initCode);
  } catch (ex) {
    sender = "0x" + ex.data.slice(-40);
  }

  //now if we already have code at the sender address, we do not need to initialize again
  //similar to what we did before utilizing create2, during initialization, we had to pass in the initCode
  //then we just pass in 0x
  const code = await hre.ethers.provider.getCode(sender);
  if (code !== "0x") {
    initCode = "0x";
  }

  console.log({ sender });

  const account = await hre.ethers.getContractFactory("Account");
  const userOp = {
    sender, //this is the smart account address and we determine it using the deployer address i.e. factory address
    nonce: "0x" + (await entryPoint.getNonce(sender, 0)).toString(16), //this refers to the nonce managed by the entry point because in SCA, the EOA nonce doesn't matter
    initCode, //is the first 20 bytes of the account factory and the call data passed to the account factory - the "CreateAccount(address)" in the Account.sol
    callData: account.interface.encodeFunctionData("execute"), // is the calldata sent to the SCA - in this case the execute function we created
    /* callGasLimit: "0x",
    verificationGasLimit: "0x",
    preVerificationGas: "0x",
    maxFeePerGas: "0x",
    maxPriorityFeePerGas: "0x", */
    paymasterAndData: PM_ADDRESS,
    signature:
      "0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c",
  };

  const response = await ethers.provider.send("eth_estimateUserOperationGas", [
    userOp,
    EP_ADDRESS,
  ]);

  const { preVerificationGas, callGasLimit, verificationGasLimit } = response;

  userOp.preVerificationGas = preVerificationGas;
  userOp.callGasLimit = callGasLimit;
  userOp.verificationGasLimit = verificationGasLimit;

  const feeData = await hre.ethers.provider.getFeeData();
  userOp.maxFeePerGas = "0x" + feeData.maxFeePerGas.toString(16);

  const maxPriorityFeePerGas = await ethers.provider.send(
    "rundler_maxPriorityFeePerGas"
  );

  userOp.maxPriorityFeePerGas = maxPriorityFeePerGas;

  const userOpHash = await entryPoint.getUserOpHash(userOp);

  userOp.signature = await signer0.signMessage(hre.ethers.getBytes(userOpHash));

  const opHash = await ethers.provider.send("eth_sendUserOperation", [
    userOp,
    EP_ADDRESS,
  ]);

  console.log(opHash);
  /* const tx = await entryPoint.handleOps([userOp], address0);
  const receipt = await tx.wait();
  console.log(receipt); */
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
